// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: category.sql

package repository

import (
	"context"
)

const checkCategoryAccess = `-- name: CheckCategoryAccess :one
SELECT
    COUNT(*) > 0 AS can_access
FROM
    category AS c
LEFT JOIN
    book AS b
ON
    c.book_id = b.id
WHERE
    c.id = ?1 AND
    b.user_id = ?2
`

type CheckCategoryAccessParams struct {
	CategoryID string `json:"categoryID"`
	UserID     string `json:"userID"`
}

func (q *Queries) CheckCategoryAccess(ctx context.Context, arg CheckCategoryAccessParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkCategoryAccess, arg.CategoryID, arg.UserID)
	var can_access bool
	err := row.Scan(&can_access)
	return can_access, err
}

const createCategory = `-- name: CreateCategory :execrows
INSERT INTO category (
    id,
    book_id,
    name,
    description,
    created_at,
    updated_at
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6
)
RETURNING
    id, book_id, name, description, created_at, updated_at
`

type CreateCategoryParams struct {
	ID          string `json:"id"`
	BookID      string `json:"bookID"`
	Name        string `json:"name"`
	Description string `json:"description"`
	CreatedAt   string `json:"createdAt"`
	UpdatedAt   string `json:"updatedAt"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createCategory,
		arg.ID,
		arg.BookID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteCategoryByID = `-- name: DeleteCategoryByID :execrows
DELETE FROM
    category
WHERE
    id = ?1
`

func (q *Queries) DeleteCategoryByID(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteCategoryByID, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getCategoriesByBookID = `-- name: GetCategoriesByBookID :many
SELECT
    id, book_id, name, description, created_at, updated_at
FROM
    category
WHERE
    book_id = ?1
ORDER BY
    name ASC
`

func (q *Queries) GetCategoriesByBookID(ctx context.Context, bookID string) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesByBookID, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :many
SELECT
    id, book_id, name, description, created_at, updated_at
FROM
    category
WHERE
    id = ?1
`

func (q *Queries) GetCategoryByID(ctx context.Context, id string) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategoryByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategoryByID = `-- name: UpdateCategoryByID :execrows
UPDATE 
    category
SET
    name = ?1,
    description = ?2,
    updated_at = ?3
WHERE
    id = ?4
`

type UpdateCategoryByIDParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	UpdatedAt   string `json:"updatedAt"`
	ID          string `json:"id"`
}

func (q *Queries) UpdateCategoryByID(ctx context.Context, arg UpdateCategoryByIDParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateCategoryByID,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
