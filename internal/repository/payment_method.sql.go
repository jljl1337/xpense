// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: payment_method.sql

package repository

import (
	"context"
)

const createPaymentMethod = `-- name: CreatePaymentMethod :execrows
INSERT INTO payment_method (
    id,
    book_id,
    name,
    description,
    created_at,
    updated_at
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6
)
RETURNING
    id, book_id, name, description, created_at, updated_at
`

type CreatePaymentMethodParams struct {
	ID          string `json:"id"`
	BookID      string `json:"book_id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	CreatedAt   int64  `json:"created_at"`
	UpdatedAt   int64  `json:"updated_at"`
}

func (q *Queries) CreatePaymentMethod(ctx context.Context, arg CreatePaymentMethodParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createPaymentMethod,
		arg.ID,
		arg.BookID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deletePaymentMethodByID = `-- name: DeletePaymentMethodByID :execrows
DELETE FROM
    payment_method
WHERE
    id = ?1
`

func (q *Queries) DeletePaymentMethodByID(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deletePaymentMethodByID, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getPaymentMethodByID = `-- name: GetPaymentMethodByID :one
SELECT
    id, book_id, name, description, created_at, updated_at
FROM
    payment_method
WHERE
    id = ?1
`

func (q *Queries) GetPaymentMethodByID(ctx context.Context, id string) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, getPaymentMethodByID, id)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentMethodsByBookID = `-- name: GetPaymentMethodsByBookID :many
SELECT
    id, book_id, name, description, created_at, updated_at
FROM
    payment_method
WHERE
    book_id = ?1
ORDER BY
    name ASC
`

func (q *Queries) GetPaymentMethodsByBookID(ctx context.Context, bookID string) ([]PaymentMethod, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentMethodsByBookID, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentMethod
	for rows.Next() {
		var i PaymentMethod
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentMethodByID = `-- name: UpdatePaymentMethodByID :execrows
UPDATE 
    payment_method
SET
    name = ?1,
    description = ?2,
    updated_at = ?3
WHERE
    id = ?4
`

type UpdatePaymentMethodByIDParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	UpdatedAt   int64  `json:"updated_at"`
	ID          string `json:"id"`
}

func (q *Queries) UpdatePaymentMethodByID(ctx context.Context, arg UpdatePaymentMethodByIDParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updatePaymentMethodByID,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
