// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package repository

import (
	"context"
)

const createUser = `-- name: CreateUser :execrows
INSERT INTO user (
    id,
    username,
    password_hash,
    created_at,
    updated_at
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5
)
RETURNING
    id, username, password_hash, created_at, updated_at
`

type CreateUserParams struct {
	ID           string `json:"id"`
	Username     string `json:"username"`
	PasswordHash string `json:"passwordHash"`
	CreatedAt    string `json:"createdAt"`
	UpdatedAt    string `json:"updatedAt"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.PasswordHash,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteUser = `-- name: DeleteUser :execrows
DELETE FROM
    user
WHERE
    id = ?1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteUser, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getUserByID = `-- name: GetUserByID :many
SELECT
    id, username, password_hash, created_at, updated_at
FROM
    user
WHERE
    id = ?1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUserByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsername = `-- name: GetUserByUsername :many
SELECT
    id, username, password_hash, created_at, updated_at
FROM
    user
WHERE
    username = ?1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUserByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPassword = `-- name: UpdateUserPassword :execrows
UPDATE
    user
SET
    password_hash = ?1,
    updated_at = ?2
WHERE
    id = ?3
`

type UpdateUserPasswordParams struct {
	PasswordHash string `json:"passwordHash"`
	UpdatedAt    string `json:"updatedAt"`
	ID           string `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateUserPassword, arg.PasswordHash, arg.UpdatedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateUserUsername = `-- name: UpdateUserUsername :execrows
UPDATE
    user
SET
    username = ?1,
    updated_at = ?2
WHERE
    id = ?3
`

type UpdateUserUsernameParams struct {
	Username  string `json:"username"`
	UpdatedAt string `json:"updatedAt"`
	ID        string `json:"id"`
}

func (q *Queries) UpdateUserUsername(ctx context.Context, arg UpdateUserUsernameParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateUserUsername, arg.Username, arg.UpdatedAt, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
