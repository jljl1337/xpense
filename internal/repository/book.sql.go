// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: book.sql

package repository

import (
	"context"
)

const createBook = `-- name: CreateBook :execrows
INSERT INTO book (
    id,
    user_id,
    name,
    description,
    created_at,
    updated_at
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6
)
RETURNING
    id, user_id, name, description, created_at, updated_at
`

type CreateBookParams struct {
	ID          string
	UserID      string
	Name        string
	Description string
	CreatedAt   int64
	UpdatedAt   int64
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createBook,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteBookByID = `-- name: DeleteBookByID :execrows
DELETE FROM
    book
WHERE
    id = ?1
`

func (q *Queries) DeleteBookByID(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteBookByID, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getBooksByUserID = `-- name: GetBooksByUserID :many
SELECT
    id, user_id, name, description, created_at, updated_at
FROM
    book
WHERE
    user_id = ?1
ORDER BY
    name ASC
LIMIT
    ?2
OFFSET
    ?2 * (?3 - 1)
`

type GetBooksByUserIDParams struct {
	UserID   string
	PageSize int64
	Page     interface{}
}

func (q *Queries) GetBooksByUserID(ctx context.Context, arg GetBooksByUserIDParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByUserID, arg.UserID, arg.PageSize, arg.Page)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookByID = `-- name: UpdateBookByID :execrows
UPDATE
    book
SET
    name = ?1,
    description = ?2,
    updated_at = ?3
WHERE
    id = ?4
`

type UpdateBookByIDParams struct {
	Name        string
	Description string
	UpdatedAt   int64
	ID          string
}

func (q *Queries) UpdateBookByID(ctx context.Context, arg UpdateBookByIDParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateBookByID,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
