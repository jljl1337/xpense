// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: session.sql

package repository

import (
	"context"
)

const createSession = `-- name: CreateSession :execrows
INSERT INTO session (
    id,
    user_id,
    token,
    csrf_token,
    expires_at,
    created_at,
    updated_at
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6,
    ?7
)
RETURNING
    id, user_id, token, csrf_token, expires_at, created_at, updated_at
`

type CreateSessionParams struct {
	ID        string `json:"id"`
	UserID    string `json:"user_id"`
	Token     string `json:"token"`
	CsrfToken string `json:"csrf_token"`
	ExpiresAt int64  `json:"expires_at"`
	CreatedAt int64  `json:"created_at"`
	UpdatedAt int64  `json:"updated_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.CsrfToken,
		arg.ExpiresAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteSession = `-- name: DeleteSession :execrows
DELETE FROM
    session
WHERE
    expires_at < ?1
`

func (q *Queries) DeleteSession(ctx context.Context, expiresAt int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteSession, expiresAt)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT
    id, user_id, token, csrf_token, expires_at, created_at, updated_at
FROM
    session
WHERE
    token = ?1
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CsrfToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSessionByToken = `-- name: UpdateSessionByToken :execrows
UPDATE
    session
SET
    expires_at = ?1,
    updated_at = ?2
WHERE
    token = ?3
`

type UpdateSessionByTokenParams struct {
	ExpiresAt int64  `json:"expires_at"`
	UpdatedAt int64  `json:"updated_at"`
	Token     string `json:"token"`
}

func (q *Queries) UpdateSessionByToken(ctx context.Context, arg UpdateSessionByTokenParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateSessionByToken, arg.ExpiresAt, arg.UpdatedAt, arg.Token)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
