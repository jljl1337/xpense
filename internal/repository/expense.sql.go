// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: expense.sql

package repository

import (
	"context"
)

const checkExpenseAccess = `-- name: CheckExpenseAccess :one
SELECT
    COUNT(*) > 0 AS can_access
FROM
    expense AS e
LEFT JOIN
    book AS b
ON
    e.book_id = b.id
WHERE
    e.id = ?1 AND
    b.user_id = ?2
`

type CheckExpenseAccessParams struct {
	ExpenseID string `json:"expenseID"`
	UserID    string `json:"userID"`
}

func (q *Queries) CheckExpenseAccess(ctx context.Context, arg CheckExpenseAccessParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkExpenseAccess, arg.ExpenseID, arg.UserID)
	var can_access bool
	err := row.Scan(&can_access)
	return can_access, err
}

const countExpensesByCategoryID = `-- name: CountExpensesByCategoryID :one
SELECT
    COUNT(*) AS count
FROM
    expense
WHERE
    category_id = ?1
`

func (q *Queries) CountExpensesByCategoryID(ctx context.Context, categoryID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countExpensesByCategoryID, categoryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countExpensesByPaymentMethodID = `-- name: CountExpensesByPaymentMethodID :one
SELECT
    COUNT(*) AS count
FROM
    expense
WHERE
    payment_method_id = ?1
`

func (q *Queries) CountExpensesByPaymentMethodID(ctx context.Context, paymentMethodID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countExpensesByPaymentMethodID, paymentMethodID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createExpense = `-- name: CreateExpense :execrows
INSERT INTO expense (
    id,
    book_id,
    category_id,
    payment_method_id,
    date,
    amount,
    remark,
    created_at,
    updated_at
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6,
    ?7,
    ?8,
    ?9
)
RETURNING
    id, book_id, category_id, payment_method_id, date, amount, remark, created_at, updated_at
`

type CreateExpenseParams struct {
	ID              string  `json:"id"`
	BookID          string  `json:"bookID"`
	CategoryID      string  `json:"categoryID"`
	PaymentMethodID string  `json:"paymentMethodID"`
	Date            string  `json:"date"`
	Amount          float64 `json:"amount"`
	Remark          string  `json:"remark"`
	CreatedAt       string  `json:"createdAt"`
	UpdatedAt       string  `json:"updatedAt"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createExpense,
		arg.ID,
		arg.BookID,
		arg.CategoryID,
		arg.PaymentMethodID,
		arg.Date,
		arg.Amount,
		arg.Remark,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteExpenseByID = `-- name: DeleteExpenseByID :execrows
DELETE FROM
    expense
WHERE
    id = ?1
`

func (q *Queries) DeleteExpenseByID(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteExpenseByID, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getExpenseByID = `-- name: GetExpenseByID :many
SELECT
    id, book_id, category_id, payment_method_id, date, amount, remark, created_at, updated_at
FROM
    expense
WHERE
    id = ?1
`

func (q *Queries) GetExpenseByID(ctx context.Context, id string) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, getExpenseByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Expense{}
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.CategoryID,
			&i.PaymentMethodID,
			&i.Date,
			&i.Amount,
			&i.Remark,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpensesByBookID = `-- name: GetExpensesByBookID :many
SELECT
    id, book_id, category_id, payment_method_id, date, amount, remark, created_at, updated_at
FROM
    expense
WHERE
    book_id = ?1
ORDER BY
    date DESC,
    updated_at DESC
LIMIT
    ?3
OFFSET
    ?2
`

type GetExpensesByBookIDParams struct {
	BookID string `json:"bookID"`
	Offset int64  `json:"offset"`
	Limit  int64  `json:"limit"`
}

func (q *Queries) GetExpensesByBookID(ctx context.Context, arg GetExpensesByBookIDParams) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, getExpensesByBookID, arg.BookID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Expense{}
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.CategoryID,
			&i.PaymentMethodID,
			&i.Date,
			&i.Amount,
			&i.Remark,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpenseByID = `-- name: UpdateExpenseByID :execrows
UPDATE 
    expense
SET
    category_id = ?1,
    payment_method_id = ?2,
    date = ?3,
    amount = ?4,
    remark = ?5,
    updated_at = ?6
WHERE
    id = ?7
`

type UpdateExpenseByIDParams struct {
	CategoryID      string  `json:"categoryID"`
	PaymentMethodID string  `json:"paymentMethodID"`
	Date            string  `json:"date"`
	Amount          float64 `json:"amount"`
	Remark          string  `json:"remark"`
	UpdatedAt       string  `json:"updatedAt"`
	ID              string  `json:"id"`
}

func (q *Queries) UpdateExpenseByID(ctx context.Context, arg UpdateExpenseByIDParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateExpenseByID,
		arg.CategoryID,
		arg.PaymentMethodID,
		arg.Date,
		arg.Amount,
		arg.Remark,
		arg.UpdatedAt,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
